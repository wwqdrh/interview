[[questions]]
type = "ShortAnswer"
prompt.prompt = """
下面代码输出什么

```cpp
using namespace std;

class A {
public:
    A() { cout << "Constructor A" << endl; }
    ~A() { cout << "Destructor A" << endl; }
};

class B : public A {
public:
    B() { cout << "Constructor B" << endl; }
    ~B() { cout << "Destructor B" << endl; }
};

int main() {
    B b;
    return 0;
}
```
"""
answer.answer = """
Constructor A
Constructor B
Destructor B
Destructor A
"""
context = """
在C++中，派生类的构造函数会首先调用基类的构造函数，然后再执行派生类的构造函数。析构函数的调用顺序与构造函数相反，先调用派生类的析构函数，再调用基类的析构函数。
"""
id = "3648f158-f7d8-44e1-b9c8-4351bba41bdb"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
const 与指针

```cpp
int x = 10;
int y = 20;
const int *p = &x;
*p = 15;
p = &y;
```

问题：以下哪一项是正确的？
"""
prompt.distractors = [
  "*p = 15; 是合法的",
  "p = &y; 是非法的",
  "两者都是非法的"
]
answer.answer = "*p = 15; 是非法的，但 p = &y; 是合法的"
context = """
const int *p 表示 p 是一个指向 const int 的指针，这意味着不能通过 p 修改 *p 的值，因此 *p = 15; 是非法的。然而，可以改变指针 p 的指向，所以 p = &y; 是合法的。
"""
id = "3bf90b35-d300-4259-bfa8-a509a520fae9"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """
```cpp
class Base {
public:
    virtual void show() { cout << "Base" << endl; }
};

class Derived : public Base {
public:
    void show() { cout << "Derived" << endl; }
};

int main() {
    Base *b = new Derived();
    b->show();
    return 0;
}
```

问题：输出是什么？
"""
prompt.distractors = [
  "Base",
  "编译错误",
  "未定义行为"
]
answer.answer = "Derived"
context = """
由于 show 是虚函数，调用的行为是动态绑定的，指针 b 实际指向的是 Derived 类的对象，因此会调用 Derived 类的 show 方法，输出 "Derived"。
"""
id = "a631a1c1-fa89-4567-94f4-32e5ad69a0cf"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
```cpp
#include <iostream>
using namespace std;

class A {
public:
    int *p;
    A(int x) {
        p = new int(x);
    }
    A(const A &a) {
        p = new int(*a.p);
    }
    ~A() {
        delete p;
    }
};

int main() {
    A obj1(5);
    A obj2 = obj1;
    *obj2.p = 10;
    cout << *obj1.p << endl;
    return 0;
}
```

问题：输出是什么？
"""
answer.answer = "5"
context = """
这里使用了深拷贝，A 类的拷贝构造函数创建了一个新的动态内存空间，并将 obj1.p 的值拷贝给 obj2.p。因此修改 obj2.p 不会影响 obj1.p，*obj1.p 仍然为 5。
"""
id = "150ced6a-ac68-4dea-a587-5f1265b716db"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> v = {1, 2, 3, 4, 5};
    for(auto it = v.begin(); it != v.end(); ++it) {
        v.erase(it);
    }
    return 0;
}
```

问题：以上代码的行为是什么？
"""
prompt.distractors = [
  "删除了所有元素",
  "只删除了第一个元素",
  "编译错误"
]
answer.answer = "未定义行为"
context = """
在遍历过程中使用 erase 修改了容器的大小，导致迭代器失效，之后的 ++it 操作是未定义行为。因此，这种写法可能会导致程序崩溃。
"""
id = "3ea0ad0e-11ff-4627-92a3-b3a7230a5cfb"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
```cpp
#include <iostream>
using namespace std;

void test() {
    try {
        throw "Exception!";
    } catch (const char* e) {
        cout << "Caught exception: " << e << endl;
    }
}

int main() {
    try {
        test();
    } catch (...) {
        cout << "Caught unknown exception" << endl;
    }
    return 0;
}
```
问题：输出是什么？
"""
prompt.distractors = [
  "Caught unknown exception",
  "Caught exception: Exception! Caught unknown exception",
  "编译错误"
]
answer.answer = "Caught exception: Exception!"
context = """
在 test 函数中，catch 捕获了 const char* 类型的异常，所以不会抛出到外层的 catch(...)。因此，输出 "Caught exception: Exception!"。
"""
id = "44e11ee1-7b5c-443e-b934-6a4e6a9fc134"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
```cpp
#include <iostream>
#include <memory>
using namespace std;

class A {
public:
    A() { cout << "A constructed" << endl; }
    ~A() { cout << "A destructed" << endl; }
};

int main() {
    shared_ptr<A> p1 = make_shared<A>();
    {
        shared_ptr<A> p2 = p1;
        cout << "Inside block" << endl;
    }
    cout << "Outside block" << endl;
    return 0;
}
```

问题：输出是什么？
"""
answer.answer = """
A constructed
Inside block
Outside block
A destructed
"""
context = """
shared_ptr 的引用计数机制在 p1 和 p2 共享对象的生命周期。当 p2 离开作用域时，引用计数减少，但不会析构对象。等 p1 也离开作用域后，才会析构 A 对象。
"""
id = "3b8afa63-9c7e-4d20-a9c8-494311b0c0b6"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
C++中的虚函数表是什么？以下哪项与虚函数表（vtable）最相关？
"""
prompt.distractors = [
  "它是用于存储所有类的成员函数的表。",
  "它是每个对象实例独有的表。",
  "它只能用于模板类。"
]
answer.answer = "它是由编译器创建的，用于支持动态绑定。"
context = """
虚函数表是编译器生成的，主要用于实现动态多态性。每个带有虚函数的类都有一个虚函数表，它存储了类的虚函数指针，供程序在运行时根据对象的实际类型调用正确的函数。
"""
id = "f7f5a176-6c90-4848-8a6b-5f56ecaf7505"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
构造函数的初始化列表,为什么在构造函数中使用初始化列表，而不是在构造函数体内赋值？
"""
prompt.distractors = [
  "可以提高代码的可读性",
  "有助于避免编译器错误",
  "无论在哪赋值，结果都是一样的"
]
answer.answer = "可以提高效率，避免先默认构造后再赋值"
context = """
初始化列表允许直接初始化类成员，特别是在成员是常量或引用类型时，必须使用初始化列表。此外，对于自定义类型，初始化列表可以避免对象先调用默认构造函数再在函数体内赋值，从而提高效率。
"""
id = "c55e7b3c-c2d3-4e54-9e66-b1fd8daa3b07"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
std::set的默认排序顺序是什么？
"""
prompt.distractors = [
  "无序",
  "逆序",
  "自定义排序"
]
answer.answer = "升序"
context = """
std::set 是一种关联容器，默认按升序排序元素。如果需要自定义排序，可以通过传递一个比较函数或仿函数来改变排序规则。
"""
id = "0c8ee62d-4ce4-4597-9ff7-11aa89386019"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
RAII的核心思想是什么？
"""
prompt.distractors = [
  "使用智能指针管理对象的生命周期",
  "所有对象都应动态分配",
  "资源必须在程序结束时手动释放"
]
answer.answer = "资源的分配与释放与对象的生命周期绑定"
context = """
RAII（Resource Acquisition Is Initialization）的核心思想是资源的获取和释放与对象的生命周期绑定，当对象被销毁时，资源自动被释放，避免内存泄漏。
"""
id = "13d1a6c0-6587-4929-9861-4323e78ce17e"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
移动语义和右值引用,右值引用的主要作用是什么？
"""
prompt.distractors = [
  "引用常量",
  "实现对象的深拷贝",
  "实现函数的动态绑定"
]
answer.answer = "实现对象的移动语义以避免不必要的拷贝"
context = """
C++11引入了右值引用（T&&），配合移动语义避免深拷贝，提升性能。在移动构造函数和移动赋值运算符中，右值引用用于接收可移动的临时对象。
"""
id = "d158c585-88a7-4627-8370-0b0aec3994a7"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个简单的C++类，重载加法运算符+，用于两个对象的相加。
"""
answer.answer = """
```cpp
#include <iostream>

class Point {
public:
    int x, y;
    Point(int x = 0, int y = 0) : x(x), y(y) {}

    Point operator+(const Point& other) {
        return Point(this->x + other.x, this->y + other.y);
    }
};

int main() {
    Point p1(1, 2), p2(3, 4);
    Point p3 = p1 + p2;
    std::cout << "(" << p3.x << ", " << p3.y << ")" << std::endl;
    return 0;
}
```
"""
context = """
重载运算符+用于定义两个Point对象相加的行为，返回一个新的Point对象。重载运算符时要注意保持符号的自然语义。
"""
id = "6904b9d4-25ab-4bb0-844a-8a87fb3cb3d7"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
内存管理, C++中的new和malloc的主要区别是什么？
"""
prompt.distractors = [
  "new只分配内存，而malloc分配内存并调用构造函数",
  "new返回void*类型，而malloc返回实际类型指针",
  "new和malloc的功能完全相同"
]
answer.answer = "new调用构造函数，而malloc只分配内"
context = """
new不仅分配内存，还调用构造函数，而malloc只分配内存，不进行对象初始化。此外，new返回实际类型指针，而malloc返回void*
"""
id = "1019f279-b3e5-4894-9f4c-23b0b713cc90"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
删除复制构造函数, 编写一个C++类，禁止使用复制构造函数和赋值运算符。

```cpp
#include <iostream>

class NonCopyable {
public:
    NonCopyable() = default;
    NonCopyable(const NonCopyable&) = delete;
    NonCopyable& operator=(const NonCopyable&) = delete;
};

int main() {
    NonCopyable obj1;
    // NonCopyable obj2 = obj1; // Error: Copy constructor is deleted
    return 0;
}
```
"""
answer.answer = """

"""
context = """
使用= delete可以明确禁止编译器生成某些默认函数，例如复制构造函数和赋值运算符。这有助于防止对象被意外复制。
"""
id = "72ed544d-66c1-4f01-905c-71eaba990a50"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
引用与指针，以下哪项关于引用和指针的描述是正确的？
"""
prompt.distractors = [
  "引用和指针都可以重新绑定到另一个对象",
  "引用可以为空，而指针不可以",
  "引用和指针的使用方式完全相同"
]
answer.answer = "引用一旦绑定到某个对象，便不能再改变"
context = """
引用在初始化时必须绑定到一个对象，之后无法更改指向，而指针可以随时指向不同的对象。引用不能为nullptr，而指针可以。
"""
id = "208dc08e-3829-4432-85d6-fa4c5af58f64"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++类，实现一个简单的函数对象（仿函数），计算两个整数的和。

```cpp
#include <iostream>

class Adder {
public:
    int operator()(int a, int b) {
        return a + b;
    }
};

int main() {
    Adder add;
    std::cout << "Sum: " << add(10, 20) << std::endl;
    return 0;
}
```
"""
answer.answer = """
Sum: 30
"""
context = """
仿函数是通过重载operator()来创建的，它允许像函数一样调用对象。这里Adder类实现了加法运算。
"""
id = "d7efcdf9-4dec-4418-a220-b75de481bf34"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
动态类型识别（RTTI）, dynamic_cast只能用于以下哪种情况？
"""
prompt.distractors = [
  "在类层次结构之间进行强制类型转换",
  "转换任何类型之间的指针",
  "将非指针类型转换为指针类型"
]
answer.answer = "将基类指针转换为派生类指针"
context = """
dynamic_cast用于在类层次结构中进行安全的类型转换，特别是将基类指针或引用转换为派生类指针或引用。它依赖于运行时类型信息（RTTI）。
"""
id = "02b20f7f-5084-4b62-87b1-144250e12ea5"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
常量指针,以下哪个选项声明了一个指向常量数据的指针？
"""
prompt.distractors = [
  "int* const p;",
  "const int* p;",
  "int const* p;"
]
prompt.answerIndex = 1
answer.answer = "2和3都正确"
context = """
const int* p和int const* p都表示指向常量数据的指针，数据不能通过指针修改，而指针本身可以指向不同的对象。int* const p表示指针本身是常量，但指向的数据可以修改。
"""
id = "be16bd94-8bc2-4986-8bee-e623b5148717"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++类，展示如何使用静态成员变量，并在主函数中输出其值。

```cpp
#include <iostream>

class Counter {
public:
    static int count;
    Counter() { ++count; }
};

int Counter::count = 0;

int main() {
    Counter obj1, obj2, obj3;
    std::cout << "Total objects: " << Counter::count << std::endl;
    return 0;
}
```
"""
answer.answer = """
Total objects: 3
"""
context = """
静态成员变量在所有类的实例之间共享。它们在类外定义，并且通过类名直接访问。
"""
id = "ba5644a1-b9f8-4e7c-b101-66102d6f9f1b"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
析构函数，以下关于析构函数的哪个描述是正确的？
"""
prompt.distractors = [
  "析构函数可以被显式调用",
  "析构函数不能被继承",
  "析构函数可以是虚函数"
]
answer.answer = "全部正确"
context = """
析构函数是特殊的成员函数，可以被显式调用。它们不能被继承，但可以是虚函数，这在多态性中非常重要。
"""
id = "c970e5a2-dba9-48ff-95e8-16ff36877450"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++类，展示拷贝构造函数的工作原理。

```cpp
#include <iostream>

class CopyDemo {
public:
    int data;
    CopyDemo(int val) : data(val) {}
    CopyDemo(const CopyDemo& other) {
        data = other.data;
        std::cout << "Copy constructor called" << std::endl;
    }
};

int main() {
    CopyDemo obj1(10);
    CopyDemo obj2 = obj1;  // Calls copy constructor
    std::cout << obj2.data << std::endl;
    return 0;
}
```
"""
answer.answer = """
constructor called  
10
"""
context = """
当通过赋值创建新对象时，会调用拷贝构造函数。该函数负责将另一个对象的值复制到新对象中。
"""
id = "3d245e7e-b49c-4784-8725-e75c3d9158db"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
虚函数与纯虚函数，以下哪个描述是正确的？
"""
prompt.distractors = [
  "虚函数必须有默认实现",
  "纯虚函数可以在基类中实现",
  "虚函数不能在派生类中重写"
]
answer.answer = "纯虚函数必须在派生类中实现"
context = """
纯虚函数没有默认实现，必须由派生类实现，否则派生类也将是抽象类。虚函数可以在派生类中重写。
"""
id = "215392dd-50b2-42fd-9d52-42ccec466f26"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++类，展示移动构造函数的工作原理。

```cpp
#include <iostream>

class MoveDemo {
public:
    int* data;
    MoveDemo(int val) {
        data = new int(val);
    }
    MoveDemo(MoveDemo&& other) noexcept {
        data = other.data;
        other.data = nullptr;
        std::cout << "Move constructor called" << std::endl;
    }
    ~MoveDemo() {
        delete data;
    }
};

int main() {
    MoveDemo obj1(10);
    MoveDemo obj2 = std::move(obj1);  // Calls move constructor
    return 0;
}
```
"""
answer.answer = """
Move constructor called
"""
context = """
移动构造函数用于将资源从一个对象“移动”到另一个对象，避免不必要的深拷贝。std::move用于将左值转换为右值引用。
"""
id = "21a11390-ac8d-410c-aa66-f762cef65bc5"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
模板元编程，C++中的模板元编程主要用于什么目的？
"""
prompt.distractors = [
  "实现多态性",
  "改善运行时性能",
  "实现递归函数"
]
answer.answer = "在编译时执行计算"
context = """
模板元编程允许在编译时进行计算，从而减少运行时开销。它主要用于编译时的类型推导和代码生成。
"""
id = "3e96e6b8-e8cf-460f-9858-4a03aa8bcdd0"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++模板类，能够存储任意类型的两个值并返回它们的最大值。

```cpp
#include <iostream>

template<typename T>
class Pair {
public:
    T a, b;
    Pair(T first, T second) : a(first), b(second) {}
    T getMax() { return (a > b) ? a : b; }
};

int main() {
    Pair<int> p(10, 20);
    std::cout << "Max: " << p.getMax() << std::endl;
    return 0;
}
```
"""
answer.answer = """
Max: 20
"""
context = """
该模板类Pair可以存储任意类型的两个值，并通过getMax方法返回它们的最大值。模板类允许创建灵活的代码，适用于不同数据类型。
"""
id = "5926d3e5-28cd-4405-9320-b6cbb2938bdc"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
如果类中没有显式定义任何构造函数，C++会自动生成什么？
"""
prompt.distractors = [
  "默认构造函数",
  "拷贝构造函数",
  "赋值运算符"
]
answer.answer = "其他所有选项"
context = """
如果程序员没有定义任何构造函数，C++编译器会自动生成默认构造函数、拷贝构造函数和赋值运算符。
"""
id = "c22a5611-ab6a-46b2-86b8-e83f2b1375de"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个C++程序，展示如何使用友元函数访问类的私有成员。

```cpp
#include <iostream>

class Box {
private:
    int width;
public:
    Box(int w) : width(w) {}
    friend void printWidth(Box& b);
};

void printWidth(Box& b) {
    std::cout << "Width: " << b.width << std::endl;
}

int main() {
    Box b(10);
    printWidth(b);
    return 0;
}
```
"""
answer.answer = """
Width: 10
"""
context = """
友元函数可以访问类的私有成员。友元函数不是类的成员函数，但可以通过在类中声明friend来授予它访问私有成员的权限。
"""
id = "6d1d06bb-a98f-4c58-8bd1-75ec432860fd"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """
模板的特化与偏特化, 以下代码中，哪些是合法的？

```cpp
template<typename T>
class A {};

template<>
class A<int> {};

template<typename T>
class A<T*> {};
```
"""
prompt.distractors = [
  "template<> class A<int> {}",
  "template<typename T> class A<T*> {}",
  "都不合法"
]
answer.answer = "都合法"
context = """
A<int> 是 A<T> 的全特化版本，合法。,A<T*> 是 A<T> 的偏特化版本，也合法。
"""
id = "b92656b5-1a7f-4e12-a9e3-7b44d6c37796"


[[questions]]
type = "ShortAnswer"
prompt.prompt = """
编写一个递归模板，计算整数的阶乘。

```cpp
template<int N>
struct Factorial {
    static const int value = N * Factorial<N - 1>::value;
};

template<>
struct Factorial<0> {
    static const int value = 1;
};

int main() {
    cout << Factorial<5>::value << endl;
}
```
"""
answer.answer = """
120
"""
context = """
Factorial<5>::value 调用了模板递归计算 5 的阶乘。
Factorial<0>::value 是递归的终止条件，返回 1。
"""
id = "95efc5fd-2484-44dd-b31a-0c4f6bfc946b"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
异常处理, 以下哪个选项关于异常处理是正确的？
"""
prompt.distractors = [
  "异常必须通过指针抛出。",
  "捕获异常时，建议使用捕获类型的引用。",
  "一个函数可以抛出异常而不需要声明抛出类型。"
]
answer.answer = "一个 catch(...) 可以捕获所有类型的异常，但无法判断具体异常类型。"
context = """
"""
id = "23abcf4f-3b69-4750-be72-d4b019b5c9dc"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
关于虚函数表的描述，下列哪项是错误的？
"""
prompt.distractors = [
  "虚函数表是一个指针数组，存储着虚函数的地址",
  "每个包含虚函数的类都有一个虚函数表",
  "虚函数表指针通常存储在对象的内存布局的开始位置"
]
answer.answer = "派生类的虚函数表总是完全覆盖基类的虚函数表"
context = """
派生类的虚函数表不会完全覆盖基类的虚函数表，而是会继承基类的虚函数表，并根据需要进行修改。如果派生类重写了基类的虚函数，那么在派生类的虚函数表中，该函数的地址会被更新为派生类的实现。如果派生类新增了虚函数，这些函数会被添加到虚函数表的末尾。
"""
id = "be711d5f-4b98-4a16-a365-c0d841bb32d0"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
下面关于std::move的描述，哪一项是正确的？
"""
prompt.distractors = [
  "std::move实际上移动了对象",
  "被std::move处理过的对象不能再被使用",
  "std::move会自动调用移动构造函数或移动赋值运算符"
]
answer.answer = "std::move是将左值转换为右值引用的无条件转换"
context = """
std::move本身并不移动任何东西，它只是将一个左值转换为右值引用，使得移动操作成为可能。它的实现通常是一个简单的static_cast。被std::move处理过的对象仍然可以使用，但其状态是未指定的。std::move不会自动调用任何函数，它只是进行类型转换。
"""
id = "f3aff1e9-b6cd-433b-9ba0-4f997c8a67a6"


[[questions]]
type = "ShortAnswer"
prompt.prompt = """
实现一个线程安全的单例模式。

```cpp
class Singleton {
public:
    static Singleton& getInstance() {
        static Singleton instance;
        return instance;
    }

    Singleton(const Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;

private:
    Singleton() = default;
};
```
"""
answer.answer = """

"""
context = """
这是一个使用C++11特性实现的线程安全的单例模式，又称为Meyers' Singleton。它利用了C++11标准中的规定：如果当控制流程第一次遇到静态局部变量的声明时，将进行该变量的初始化，且初始化过程是线程安全的。
这种实现方式的优点包括：

线程安全：C++11保证局部静态变量的初始化是线程安全的。
懒加载：实例只有在第一次被请求时才会被创建。
自动释放：当程序结束时，静态对象会被自动销毁。

通过将拷贝构造函数和赋值运算符声明为delete，我们防止了实例被复制。构造函数被声明为private，防止外部直接创建实例。
"""
id = "7e221b82-7bee-4cc9-acb6-6538e2b0711c"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
解释一下什么是RAII，并给出一个示例。

RAII（Resource Acquisition Is Initialization）是C++中的一种编程技巧，它将必须在使用前请求的资源（如内存、文件句柄、网络连接等）的生命周期与一个对象的生命周期绑定，通过这种方式来确保资源的释放

```cpp
class FileHandler {
private:
    FILE* file;

public:
    FileHandler(const char* filename, const char* mode) {
        file = fopen(filename, mode);
        if (!file) throw std::runtime_error("Could not open file");
    }

    ~FileHandler() {
        if (file) {
            fclose(file);
        }
    }

    // 禁止拷贝
    FileHandler(const FileHandler&) = delete;
    FileHandler& operator=(const FileHandler&) = delete;

    // 允许移动
    FileHandler(FileHandler&& other) noexcept : file(other.file) {
        other.file = nullptr;
    }

    FileHandler& operator=(FileHandler&& other) noexcept {
        if (this != &other) {
            if (file) fclose(file);
            file = other.file;
            other.file = nullptr;
        }
        return *this;
    }

    // 文件操作方法
    void write(const char* data) {
        if (file) fputs(data, file);
    }
};
```
"""
answer.answer = """

"""
context = """
在这个例子中，FileHandler类封装了文件操作。在构造函数中，我们打开文件，如果失败则抛出异常。在析构函数中，我们确保文件被正确关闭。这样，无论FileHandler对象如何退出作用域（正常退出或因异常退出），文件都会被正确关闭，从而防止资源泄漏。
我们还禁用了拷贝操作，并实现了移动语义，这样可以有效地转移资源所有权。这个类展示了RAII的核心思想：资源的获取和释放与对象的生命周期绑定。
"""
id = "7b7c7dad-ddaa-4ba5-8562-b33e5bc4c537"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
下列关于std::shared_ptr的描述，哪一项是错误的？
"""
prompt.distractors = [
  "std::shared_ptr使用引用计数来追踪有多少个shared_ptr共享同一个对象",
  "循环引用可能导致std::shared_ptr管理的内存永远不会被释放",
  "可以使用std::make_shared来创建std::shared_ptr"
]
answer.answer = "std::shared_ptr总是线程安全的"
context = """
std::shared_ptr的引用计数操作是原子的，因此多个线程同时读取一个shared_ptr是安全的。但是，shared_ptr本身并不能保证它所指向的对象在多线程环境下的安全性。如果多个线程通过shared_ptr同时访问和修改被管理的对象，仍然需要额外的同步机制。

循环引用是shared_ptr的一个常见问题，可以使用weak_ptr来打破循环。
"""
id = "937da759-75e1-4e7c-87dd-6b39689f0297"


[[questions]]
type = "ShortAnswer"
prompt.prompt = """
实现一个简单的智能指针类。

```cpp
template<typename T>
class SmartPtr {
private:
    T* ptr;

public:
    explicit SmartPtr(T* p = nullptr) : ptr(p) {}

    ~SmartPtr() {
        delete ptr;
    }

    // 禁止拷贝
    SmartPtr(const SmartPtr&) = delete;
    SmartPtr& operator=(const SmartPtr&) = delete;

    // 移动构造函数
    SmartPtr(SmartPtr&& other) noexcept : ptr(other.ptr) {
        other.ptr = nullptr;
    }

    // 移动赋值运算符
    SmartPtr& operator=(SmartPtr&& other) noexcept {
        if (this != &other) {
            delete ptr;
            ptr = other.ptr;
            other.ptr = nullptr;
        }
        return *this;
    }

    T& operator*() const { return *ptr; }
    T* operator->() const { return ptr; }

    T* get() const { return ptr; }

    void reset(T* p = nullptr) {
        delete ptr;
        ptr = p;
    }
};
```
"""
answer.answer = """

"""
context = """
这个简单的智能指针类实现了以下特性：

- 构造函数接受一个原始指针，并在析构函数中删除它，实现了RAII。
- 禁用了拷贝构造和拷贝赋值，防止多个SmartPtr指向同一块内存。
- 实现了移动构造和移动赋值，允许SmartPtr的所有权转移。
- 重载了*和->操作符，使SmartPtr的使用方式类似于原始指针。
- 提供了get()方法来获取原始指针，以及reset()方法来重置指针。
"""
id = "53bbfd15-86e3-4306-8424-08d154dd58f7"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
解释一下完美转发（Perfect Forwarding）是什么，以及如何实现。

完美转发是C++11引入的一个特性，它允许函数模板将其参数按照原来的类型（保持值类别）转发给另一个函数。完美转发通常通过右值引用和std::forward来实现。

```cpp
template<typename T, typename... Args>
T* create(Args&&... args) {
    return new T(std::forward<Args>(args)...);
}

class MyClass {
public:
    MyClass(int a, double b, std::string c) {
        // 构造函数实现
    }
};

// 使用
auto ptr = create<MyClass>(1, 2.0, std::string("three"));
```
"""
answer.answer = """

"""
context = """
- 函数模板create使用可变参数模板来接受任意数量和类型的参数。
- 参数包Args&&... args使用右值引用，可以接受左值和右值。
- std::forward<Args>(args)...将参数完美转发给T的构造函数。
- 如果传入的是左值，std::forward会将其保持为左值；如果传入的是右值，则会将其转换为右值。

避免了不必要的拷贝，提高了效率。允许编写通用的包装函数，这些函数可以精确地转发其参数。
"""
id = "32bd6634-547b-4aed-bc6a-62ff5f38023f"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
解释一下C++中的内存模型和memory order。

C++11引入了内存模型，它定义了多线程程序中内存访问的语义。内存模型规定了在多线程环境下，对共享数据的读写操作如何进行同步。

```cpp
#include <atomic>
#include <thread>

std::atomic<int> x(0), y(0);

void thread1() {
    x.store(1, std::memory_order_release);
}

void thread2() {
    while (x.load(std::memory_order_acquire) == 0) {}
    // 此时可以安全地访问在thread1中x.store之前的所有写入
}
```
"""
answer.answer = """
memory_order_relaxed
memory_order_consume
memory_order_acquire
memory_order_release
memory_order_acq_rel
memory_order_seq_cst
"""
context = """
memory_order_relaxed适用于只需要保证操作原子性的场景，如计数器。
memory_order_acquire和memory_order_release配对使用可以建立同步关系，确保release之前的所有写入对acquire之后的读取可见。
memory_order_seq_cst提供了最强的保证，但可能带来性能开销。
"""
id = "2b7cc9b5-4b29-44f7-b637-b6641398d44a"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """

"""
prompt.distractors = [
  "",
  "",
  ""
]
answer.answer = ""
context = """
"""
id = "f36fdc9b-ae6b-4f3f-86a2-f03ee64c5074"
